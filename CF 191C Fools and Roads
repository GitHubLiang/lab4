/*

在树的任意两点所在的所有树的边权加一，输出最后所有的边权	

LCA。我们可以离线操作，把所有的询问直接求出LCA，然后用数组
dis[x] ++ ,   dis[y]++,
dis[LCA(x,y)]  -=  2
最后DFS统计一下答案

*/
#include <set>
#include <map>
#include <list>
#include <cmath>
#include <queue>
#include <stack>
#include <string>
#include <vector>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

#define debug puts("here")
#define rep(i,n) for(int i=0;i<n;i++)
#define rep1(i,n) for(int i=1;i<=n;i++)
#define REP(i,a,b) for(int i=a;i<=b;i++)
#define foreach(i,vec) for(unsigned i=0;i<vec.size();i++)
#define pb push_back
#define RD(n) scanf("%d",&n)
#define RD2(x,y) scanf("%d%d",&x,&y)
#define RD3(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define RD4(x,y,z,w) scanf("%d%d%d%d",&x,&y,&z,&w)
#define All(vec) vec.begin(),vec.end()
#define MP make_pair
#define PII pair<int,int>
#define PQ priority_queue
#define cmax(x,y) x = max(x,y)
#define cmin(x,y) x = min(x,y)
#define fir first
#define sec second

/******** program ********************/

const int MAXN = 2e5+5;

vector< PII > edge[MAXN];
vector< PII > ask[MAXN];
int fa[MAXN];
bool use[MAXN];
int pa[MAXN];
int n,m;
int dis[MAXN];
int a[MAXN],b[MAXN];
int ans[MAXN];

int find_set(int x){///并查集找父节点路径压缩
    if(fa[x]!=x)
        fa[x] = find_set(fa[x]);
    return fa[x];
}

/*********Tarjan算法的核心思想*********/
void lca(int x,int f){
    //cout<<"x = "<<x<<endl;
    use[x] = true;///已经遍历
    fa[x] = x;///该节点插入并查集,并且自己为一个独立的集合
    foreach(i,ask[x]){///遍历有关节点x的所有询问
        int y = ask[x][i].first;///目标节点
        int id = ask[x][i].second;///输入的顺序
        //cout<<"dsadsa = "<<x<<" "<<y<<" "<<id<<endl;
        if(use[y])
            pa[id] = find_set(y);///如果已经遍历,那么答案就是它的父节点
    }

    foreach(i,edge[x]){///遍历所有儿子
        int y = edge[x][i].first;
        //cout<<"y = "<<y<<endl;
        if(use[y])continue;
        lca(y,x);///如果当前正在访问该子树的根,那么此前已访问过的节点的父节点必然是
        ///从根节点到该节点的唯一路上(*).这本身也是一个dfs
        fa[y] = x;///如果已经回溯,即完成了上一条语句对y节点子树的遍历,
        ///退出之后将y节点的父节点设为x,也就保证了这一步退出之后(*)条件仍然成立.
    }
}

void dfs(int x,int f){
    foreach(i,edge[x]){
        int y = edge[x][i].first;
        if(y==f)continue;
        dfs(y,x);
        int id = edge[x][i].second;
        dis[x] += dis[y];///类似于差分数列的思想
        ans[id] = dis[y];///从叶子节点向根统计结果
    }
}

int main(){

//#ifndef ONLINE_JUDGE
//	freopen("sum.in","r",stdin);
	//freopen("sum.out","w",stdout);
//#endif

    while(cin>>n){
        int x,y;
        rep(i,MAXN){//清零
            edge[i].clear();
            ask[i].clear();
        }

        memset(use,false,sizeof(use));//清零初始化
        REP(i,2,n){
            RD2(x,y);
            edge[x].pb( MP(y,i) );
            edge[y].pb( MP(x,i) );
        }
        RD(m);
        rep1(i,m){
            RD2(x,y);
            a[i] = x;//第i条路的两端点
            b[i] = y;
            ask[x].pb( MP(y,i) );//注意ask也是双向插入的
            ask[y].pb( MP(x,i) );
        }
        lca(1,0);

        memset(dis,0,sizeof(dis));
        rep1(i,m){
            x = a[i];
            y = b[i];
            dis[x] ++;///类似于差分数列的思想
            dis[y] ++;
            dis[ pa[i] ] -= 2;///保证增量向上至多只影响到lca),lca以上的路不受下面子树影响
            //cout<<x<<" "<<y<<" "<<pa[i]<<endl;
        }

        dfs(1,0);

        REP(i,2,n)
            printf("%d ",ans[i]);
        puts("");
    }

	return 0;
}
