#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
const int MAXN = 12;
const int INF = 0x3f3f3f3f;
int next[MAXN],dp[1<<10][MAXN],cat[MAXN][MAXN],n;
char str[MAXN][MAXN],dis[MAXN];
//fill cat[i][j]...bruce
int cmp(char a[], int la, char b[], int lb)
{
    int ans = 0;
    int pa = la - 1, pb = 0;
    for(;pa>=0;pa--)
    {
        int cnt = 0;
        for(int i=0;i<la-pa && i<lb-pb;i++)
            if(a[pa+i]==b[pb+i])    cnt++;
        ans = max(ans, cnt);
    }
    pa = 0;
    for(;pb<lb;pb++)
    {
        int cnt = 0;
        for(int i=0;i<la-pa && i<lb-pb;i++)
            if(a[pa+i]==b[pb+i])    cnt++;
        ans = max(ans, cnt);
    }
    return ans;
}
void pre()
{
    for(int i=0;i<n;i++)
        for(int j=i+1;j<n;j++)
            cat[i][j] = cat[j][i] = cmp(str[i],strlen(str[i]),str[j],strlen(str[j]));
}
/*
char* bin(int x)
{
    dis[n] = '\0';
    for(int i=0;i<n;i++)
    {
        if((1<<i)&x)    dis[n-i-1] = '1';
        else            dis[n-i-1] = '0';
    }
    return dis;
}*/
int dfs(int s, int i)
{
    if(dp[s][i]!=INF)   return dp[s][i];
    if(!s)  return dp[s][i] = 0;
    int cnt = __builtin_popcount(s);
    if(cnt==1)  return dp[s][i] = 0;
    int ans = 0;
    for(int j=0;j<n;j++)
        if(i!=j && (1<<j)&s)
            ans = max(ans, dfs(s^(1<<i),j)+cat[i][j]);
            //printf("dp[%s][%d] = %d\n",bin(s^(1<<i)),j,dp[s^(1<<i)][j]);
    return dp[s][i] = ans;
}
int main()
{
    while(scanf("%d",&n)==1 && n>0)
    {
        for(int i=0;i<n;i++)
            scanf("%s",str[i]);
        pre();
        int ans = 0;
        memset(dp,0x3f,sizeof(dp));
        for(int i=0;i<n;i++)
            ans = max(ans, dfs((1<<n)-1, i));
           // printf("dp[%s][%d] = %d\n",bin((1<<n)-1),i,dp[(1<<n)-1][i]);
        printf("%d\n",ans);
    }
}
// modified from B3